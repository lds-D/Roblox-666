local ESP = {
    Enabled = false,
    Box = true,
    Lines = true,
    Names = true,
    Health = true,
    Distance = true,
    Prediction = true,
    AdvancedPrediction = true,
    Coordinates = true,
    Skeleton = true,
    OuterSkeleton = true,
    Radar = true,
    
    BoxColor = Color3.fromRGB(255, 255, 255),
    LineColor = Color3.fromRGB(255, 0, 0),
    NameColor = Color3.fromRGB(255, 255, 255),
    HealthColor = Color3.fromRGB(0, 255, 0),
    DistanceColor = Color3.fromRGB(255, 255, 255),
    PredictionColor = Color3.fromRGB(255, 165, 0),
    AdvancedPredictionColor = Color3.fromRGB(255, 0, 255),
    CoordinatesColor = Color3.fromRGB(200, 200, 200),
    SkeletonColor = Color3.fromRGB(0, 255, 255),
    OuterSkeletonColor = Color3.fromRGB(255, 0, 255),
    RadarColor = Color3.fromRGB(0, 255, 0),
    RadarBackgroundColor = Color3.fromRGB(20, 20, 20),
    RadarEnemyColor = Color3.fromRGB(255, 0, 0),
    
    BoxThickness = 1,
    LineThickness = 1,
    SkeletonThickness = 1,
    OuterSkeletonThickness = 1,
    RadarThickness = 2,
    
    TextSize = 14,
    Font = Enum.Font.SourceSansBold,
    
    PredictionTime = 0.5,
    AdvancedPredictionSteps = 10,
    AdvancedPredictionInterval = 0.1,
    
    RadarSize = 150,
    RadarRange = 100,
    RadarDotSize = 5,
    
    Players = game:GetService("Players"),
    RunService = game:GetService("RunService"),
    Camera = workspace.CurrentCamera,
    UserInputService = game:GetService("UserInputService"),
    
    PredictionHistory = {},
    HistorySize = 10,
    
    RadarObjects = {}
}

local ESPObjects = {}

local function CalculateAdvancedPrediction(player, steps, interval)
    if not ESP.PredictionHistory[player] or #ESP.PredictionHistory[player] < 2 then return nil end
    
    local history = ESP.PredictionHistory[player]
    local lastPos = history[#history]
    local secondLastPos = history[#history-1]
    
    local velocity = (lastPos - secondLastPos) / interval
    local acceleration = Vector3.new(0, 0, 0)
    
    if #history >= 3 then
        local thirdLastPos = history[#history-2]
        acceleration = ((lastPos - secondLastPos) - (secondLastPos - thirdLastPos)) / (interval * interval)
    end
    
    local predictedPositions = {}
    local currentPos = lastPos
    
    for i = 1, steps do
        local time = i * interval
        local predictedPos = currentPos + velocity * time + 0.5 * acceleration * time * time
        table.insert(predictedPositions, predictedPos)
    end
    
    return predictedPositions
end

local function CreateESP(player)
    local character = player.Character or player.CharacterAdded:Wait()
    local humanoid = character:WaitForChild("Humanoid")
    local rootPart = character:WaitForChild("HumanoidRootPart")
    
    ESP.PredictionHistory[player] = {}
    
    local espObject = {
        Player = player,
        Character = character,
        Humanoid = humanoid,
        RootPart = rootPart,
        
        Box = nil,
        Line = nil,
        Name = nil,
        Health = nil,
        Distance = nil,
        Prediction = nil,
        AdvancedPrediction = {},
        Coordinates = nil,
        Skeleton = {},
        OuterSkeleton = {},
        RadarDot = nil,
        
        Connections = {}
    }
    
    if ESP.Box then
        espObject.Box = Drawing.new("Square")
        espObject.Box.Visible = false
        espObject.Box.Color = ESP.BoxColor
        espObject.Box.Thickness = ESP.BoxThickness
        espObject.Box.Filled = false
    end
    
    if ESP.Lines then
        espObject.Line = Drawing.new("Line")
        espObject.Line.Visible = false
        espObject.Line.Color = ESP.LineColor
        espObject.Line.Thickness = ESP.LineThickness
    end
    
    if ESP.Names then
        espObject.Name = Drawing.new("Text")
        espObject.Name.Visible = false
        espObject.Name.Color = ESP.NameColor
        espObject.Name.Size = ESP.TextSize
        espObject.Name.Font = ESP.Font
        espObject.Name.Text = player.Name
    end
    
    if ESP.Health then
        espObject.Health = Drawing.new("Text")
        espObject.Health.Visible = false
        espObject.Health.Color = ESP.HealthColor
        espObject.Health.Size = ESP.TextSize
        espObject.Health.Font = ESP.Font
    end
    
    if ESP.Distance then
        espObject.Distance = Drawing.new("Text")
        espObject.Distance.Visible = false
        espObject.Distance.Color = ESP.DistanceColor
        espObject.Distance.Size = ESP.TextSize
        espObject.Distance.Font = ESP.Font
    end
    
    if ESP.Prediction then
        espObject.Prediction = Drawing.new("Line")
        espObject.Prediction.Visible = false
        espObject.Prediction.Color = ESP.PredictionColor
        espObject.Prediction.Thickness = ESP.LineThickness
    end
    
    if ESP.AdvancedPrediction then
        for i = 1, ESP.AdvancedPredictionSteps do
            local line = Drawing.new("Line")
            line.Visible = false
            line.Color = ESP.AdvancedPredictionColor
            line.Thickness = ESP.LineThickness
            line.Transparency = 1 - (i / ESP.AdvancedPredictionSteps)
            table.insert(espObject.AdvancedPrediction, line)
        end
    end
    
    if ESP.Coordinates then
        espObject.Coordinates = Drawing.new("Text")
        espObject.Coordinates.Visible = false
        espObject.Coordinates.Color = ESP.CoordinatesColor
        espObject.Coordinates.Size = ESP.TextSize
        espObject.Coordinates.Font = ESP.Font
    end
    
    if ESP.Radar then
        espObject.RadarDot = Drawing.new("Circle")
        espObject.RadarDot.Visible = false
        espObject.RadarDot.Color = ESP.RadarEnemyColor
        espObject.RadarDot.Thickness = 1
        espObject.RadarDot.Filled = true
        espObject.RadarDot.Radius = ESP.RadarDotSize
    end
    
    local skeletonConnections = {
        {"Head", "UpperTorso"},
        {"UpperTorso", "LowerTorso"},
        {"UpperTorso", "LeftUpperArm"},
        {"UpperTorso", "RightUpperArm"},
        {"LowerTorso", "LeftUpperLeg"},
        {"LowerTorso", "RightUpperLeg"},
        {"LeftUpperArm", "LeftLowerArm"},
        {"LeftLowerArm", "LeftHand"},
        {"RightUpperArm", "RightLowerArm"},
        {"RightLowerArm", "RightHand"},
        {"LeftUpperLeg", "LeftLowerLeg"},
        {"LeftLowerLeg", "LeftFoot"},
        {"RightUpperLeg", "RightLowerLeg"},
        {"RightLowerLeg", "RightFoot"}
    }

    local outerSkeletonConnections = {
        {"Head", "LeftFoot"},
        {"Head", "RightFoot"},
        {"LeftHand", "RightHand"},
        {"LeftFoot", "RightFoot"}
    }
    
    if ESP.Skeleton then
        for _, connection in ipairs(skeletonConnections) do
            local line = Drawing.new("Line")
            line.Visible = false
            line.Color = ESP.SkeletonColor
            line.Thickness = ESP.SkeletonThickness
            table.insert(espObject.Skeleton, {Line = line, Part1 = connection[1], Part2 = connection[2]})
        end
    end
    
    if ESP.OuterSkeleton then
        for _, connection in ipairs(outerSkeletonConnections) do
            local line = Drawing.new("Line")
            line.Visible = false
            line.Color = ESP.OuterSkeletonColor
            line.Thickness = ESP.OuterSkeletonThickness
            table.insert(espObject.OuterSkeleton, {Line = line, Part1 = connection[1], Part2 = connection[2]})
        end
    end
    
    table.insert(espObject.Connections, character.ChildRemoved:Connect(function(child)
        if child == humanoid or child == rootPart then
            RemoveESP(player)
        end
    end))
    
    table.insert(espObject.Connections, humanoid.Died:Connect(function()
        RemoveESP(player)
    end))
    
    ESPObjects[player] = espObject
end

local function RemoveESP(player)
    local espObject = ESPObjects[player]
    if not espObject then return end
    
    for _, connection in ipairs(espObject.Connections) do
        connection:Disconnect()
    end
    
    if espObject.Box then espObject.Box:Remove() end
    if espObject.Line then espObject.Line:Remove() end
    if espObject.Name then espObject.Name:Remove() end
    if espObject.Health then espObject.Health:Remove() end
    if espObject.Distance then espObject.Distance:Remove() end
    if espObject.Prediction then espObject.Prediction:Remove() end
    
    for _, line in ipairs(espObject.AdvancedPrediction) do
        line:Remove()
    end
    
    if espObject.Coordinates then espObject.Coordinates:Remove() end
    if espObject.RadarDot then espObject.RadarDot:Remove() end
    
    for _, skeleton in ipairs(espObject.Skeleton) do
        skeleton.Line:Remove()
    end
    
    for _, outerSkeleton in ipairs(espObject.OuterSkeleton) do
        outerSkeleton.Line:Remove()
    end
    
    ESPObjects[player] = nil
    ESP.PredictionHistory[player] = nil
end

local function CreateRadar()
    ESP.RadarFrame = Drawing.new("Square")
    ESP.RadarFrame.Visible = false
    ESP.RadarFrame.Color = ESP.RadarBackgroundColor
    ESP.RadarFrame.Thickness = ESP.RadarThickness
    ESP.RadarFrame.Filled = true
    ESP.RadarFrame.Size = Vector2.new(ESP.RadarSize, ESP.RadarSize)
    ESP.RadarFrame.Position = Vector2.new(10, 10)
    
    ESP.RadarCenter = Drawing.new("Circle")
    ESP.RadarCenter.Visible = false
    ESP.RadarCenter.Color = ESP.RadarColor
    ESP.RadarCenter.Thickness = 1
    ESP.RadarCenter.Filled = false
    ESP.RadarCenter.Radius = 2
    ESP.RadarCenter.Position = Vector2.new(10 + ESP.RadarSize/2, 10 + ESP.RadarSize/2)
    
    ESP.RadarCrossX = Drawing.new("Line")
    ESP.RadarCrossX.Visible = false
    ESP.RadarCrossX.Color = ESP.RadarColor
    ESP.RadarCrossX.Thickness = 1
    ESP.RadarCrossX.From = Vector2.new(10, 10 + ESP.RadarSize/2)
    ESP.RadarCrossX.To = Vector2.new(10 + ESP.RadarSize, 10 + ESP.RadarSize/2)
    
    ESP.RadarCrossY = Drawing.new("Line")
    ESP.RadarCrossY.Visible = false
    ESP.RadarCrossY.Color = ESP.RadarColor
    ESP.RadarCrossY.Thickness = 1
    ESP.RadarCrossY.From = Vector2.new(10 + ESP.RadarSize/2, 10)
    ESP.RadarCrossY.To = Vector2.new(10 + ESP.RadarSize/2, 10 + ESP.RadarSize)
    
    ESP.RadarCircle = Drawing.new("Circle")
    ESP.RadarCircle.Visible = false
    ESP.RadarCircle.Color = ESP.RadarColor
    ESP.RadarCircle.Thickness = 1
    ESP.RadarCircle.Filled = false
    ESP.RadarCircle.Radius = ESP.RadarSize/2
    ESP.RadarCircle.Position = Vector2.new(10 + ESP.RadarSize/2, 10 + ESP.RadarSize/2)
end

local function UpdateRadar()
    if not ESP.Radar or not ESP.RadarFrame then return end
    
    ESP.RadarFrame.Visible = ESP.Enabled
    ESP.RadarCenter.Visible = ESP.Enabled
    ESP.RadarCrossX.Visible = ESP.Enabled
    ESP.RadarCrossY.Visible = ESP.Enabled
    ESP.RadarCircle.Visible = ESP.Enabled
    
    if not ESP.Enabled then return end
    
    local localPlayer = ESP.Players.LocalPlayer
    if not localPlayer then return end
    
    local localCharacter = localPlayer.Character
    if not localCharacter then return end
    
    local localRootPart = localCharacter:FindFirstChild("HumanoidRootPart")
    if not localRootPart then return end
    
    local localCFrame = ESP.Camera.CFrame
    local radarCenter = Vector2.new(10 + ESP.RadarSize/2, 10 + ESP.RadarSize/2)
    
    for player, espObject in pairs(ESPObjects) do
        if player ~= localPlayer and espObject.Character and espObject.Humanoid and espObject.Humanoid.Health > 0 then
            local character = espObject.Character
            local rootPart = espObject.RootPart
            
            if rootPart and rootPart.Parent == character then
                local relativePos = localCFrame:PointToObjectSpace(rootPart.Position)
                local distance = (rootPart.Position - localRootPart.Position).Magnitude
                
                if distance <= ESP.RadarRange then
                    local radarX = radarCenter.X + (relativePos.X / ESP.RadarRange) * (ESP.RadarSize/2)
                    local radarY = radarCenter.Y - (relativePos.Z / ESP.RadarRange) * (ESP.RadarSize/2)
                    
                    if espObject.RadarDot then
                        espObject.RadarDot.Position = Vector2.new(radarX, radarY)
                        espObject.RadarDot.Visible = true
                    end
                else
                    if espObject.RadarDot then
                        espObject.RadarDot.Visible = false
                    end
                end
            else
                if espObject.RadarDot then
                    espObject.RadarDot.Visible = false
                end
            end
        else
            if espObject.RadarDot then
                espObject.RadarDot.Visible = false
            end
        end
    end
end

local function UpdateESP()
    if not ESP.Enabled then return end
    
    local localPlayer = ESP.Players.LocalPlayer
    if not localPlayer then return end
    
    local localCharacter = localPlayer.Character
    if not localCharacter then return end
    
    local localRootPart = localCharacter:FindFirstChild("HumanoidRootPart")
    if not localRootPart then return end
    
    for player, espObject in pairs(ESPObjects) do
        if player ~= localPlayer and espObject.Character and espObject.Humanoid and espObject.Humanoid.Health > 0 then
            local character = espObject.Character
            local rootPart = espObject.RootPart
            local humanoid = espObject.Humanoid
            
            if rootPart and rootPart.Parent == character then
                table.insert(ESP.PredictionHistory[player], rootPart.Position)
                if #ESP.PredictionHistory[player] > ESP.HistorySize then
                    table.remove(ESP.PredictionHistory[player], 1)
                end

                local rootPos, rootVisible = ESP.Camera:WorldToViewportPoint(rootPart.Position)
                
                if rootVisible then
                    local head = character:FindFirstChild("Head")
                    local torso = character:FindFirstChild("UpperTorso") or character:FindFirstChild("Torso")
                    
                    if head and torso then
                        local headPos = ESP.Camera:WorldToViewportPoint(head.Position)
                        local torsoPos = ESP.Camera:WorldToViewportPoint(torso.Position)
                        
                        local height = (headPos.Y - torsoPos.Y) * 2.5
                        local width = height * 0.6
                        
                        if ESP.Box and espObject.Box then
                            espObject.Box.Position = Vector2.new(rootPos.X - width / 2, rootPos.Y - height / 2)
                            espObject.Box.Size = Vector2.new(width, height)
                            espObject.Box.Visible = true
                        end
                        
                        if ESP.Lines and espObject.Line then
                            local localRootPos = ESP.Camera:WorldToViewportPoint(localRootPart.Position)
                            espObject.Line.From = Vector2.new(localRootPos.X, localRootPos.Y)
                            espObject.Line.To = Vector2.new(rootPos.X, rootPos.Y)
                            espObject.Line.Visible = true
                        end
                        
                        if ESP.Names and espObject.Name then
                            espObject.Name.Position = Vector2.new(rootPos.X, rootPos.Y - height / 2 - 20)
                            espObject.Name.Visible = true
                        end
                        
                        if ESP.Health and espObject.Health then
                            local health = math.floor(humanoid.Health)
                            local maxHealth = humanoid.MaxHealth
                            local healthPercent = health / maxHealth
                            
                            if healthPercent > 0.7 then
                                espObject.Health.Color = Color3.fromRGB(0, 255, 0)
                            elseif healthPercent > 0.3 then
                                espObject.Health.Color = Color3.fromRGB(255, 255, 0)
                            else
                                espObject.Health.Color = Color3.fromRGB(255, 0, 0)
                            end
                            
                            espObject.Health.Text = tostring(health) .. "/" .. tostring(maxHealth)
                            espObject.Health.Position = Vector2.new(rootPos.X, rootPos.Y - height / 2 - 35)
                            espObject.Health.Visible = true
                        end
                        
                        if ESP.Distance and espObject.Distance then
                            local distance = (localRootPart.Position - rootPart.Position).Magnitude
                            espObject.Distance.Text = tostring(math.floor(distance)) .. "m"
                            espObject.Distance.Position = Vector2.new(rootPos.X, rootPos.Y - height / 2 - 50)
                            espObject.Distance.Visible = true
                        end
                        
                        if ESP.Prediction and espObject.Prediction then
                            local velocity = rootPart.Velocity
                            local predictedPos = rootPart.Position + velocity * ESP.PredictionTime
                            local predictedPos2D = ESP.Camera:WorldToViewportPoint(predictedPos)
                            
                            if predictedPos2D.Z > 0 then
                                espObject.Prediction.From = Vector2.new(rootPos.X, rootPos.Y)
                                espObject.Prediction.To = Vector2.new(predictedPos2D.X, predictedPos2D.Y)
                                espObject.Prediction.Visible = true
                            else
                                espObject.Prediction.Visible = false
                            end
                        end
                        
                        if ESP.AdvancedPrediction and #espObject.AdvancedPrediction > 0 then
                            local predictedPositions = CalculateAdvancedPrediction(player, ESP.AdvancedPredictionSteps, ESP.AdvancedPredictionInterval)
                            
                            if predictedPositions then
                                local lastPos2D = rootPos
                                
                                for i, line in ipairs(espObject.AdvancedPrediction) do
                                    if i <= #predictedPositions then
                                        local predictedPos2D = ESP.Camera:WorldToViewportPoint(predictedPositions[i])
                                        
                                        if predictedPos2D.Z > 0 then
                                            line.From = Vector2.new(lastPos2D.X, lastPos2D.Y)
                                            line.To = Vector2.new(predictedPos2D.X, predictedPos2D.Y)
                                            line.Visible = true
                                            lastPos2D = predictedPos2D
                                        else
                                            line.Visible = false
                                        end
                                    else
                                        line.Visible = false
                                    end
                                end
                            else
                                for _, line in ipairs(espObject.AdvancedPrediction) do
                                    line.Visible = false
                                end
                            end
                        end

                        if ESP.Coordinates and espObject.Coordinates then
                            local x = math.floor(rootPart.Position.X)
                            local y = math.floor(rootPart.Position.Y)
                            local z = math.floor(rootPart.Position.Z)
                            espObject.Coordinates.Text = "X: " .. x .. " Y: " .. y .. " Z: " .. z
                            espObject.Coordinates.Position = Vector2.new(rootPos.X, rootPos.Y + height / 2 + 5)
                            espObject.Coordinates.Visible = true
                        end
                        
                        if ESP.Skeleton then
                            for _, skeleton in ipairs(espObject.Skeleton) do
                                local part1 = character:FindFirstChild(skeleton.Part1)
                                local part2 = character:FindFirstChild(skeleton.Part2)
                                
                                if part1 and part2 then
                                    local pos1 = ESP.Camera:WorldToViewportPoint(part1.Position)
                                    local pos2 = ESP.Camera:WorldToViewportPoint(part2.Position)
                                    
                                    if pos1.Z > 0 and pos2.Z > 0 then
                                        skeleton.Line.From = Vector2.new(pos1.X, pos1.Y)
                                        skeleton.Line.To = Vector2.new(pos2.X, pos2.Y)
                                        skeleton.Line.Visible = true
                                    else
                                        skeleton.Line.Visible = false
                                    end
                                else
                                    skeleton.Line.Visible = false
                                end
                            end
                        end
                        
                        if ESP.OuterSkeleton then
                            for _, outerSkeleton in ipairs(espObject.OuterSkeleton) do
                                local part1 = character:FindFirstChild(outerSkeleton.Part1)
                                local part2 = character:FindFirstChild(outerSkeleton.Part2)
                                
                                if part1 and part2 then
                                    local pos1 = ESP.Camera:WorldToViewportPoint(part1.Position)
                                    local pos2 = ESP.Camera:WorldToViewportPoint(part2.Position)
                                    
                                    if pos1.Z > 0 and pos2.Z > 0 then
                                        outerSkeleton.Line.From = Vector2.new(pos1.X, pos1.Y)
                                        outerSkeleton.Line.To = Vector2.new(pos2.X, pos2.Y)
                                        outerSkeleton.Line.Visible = true
                                    else
                                        outerSkeleton.Line.Visible = false
                                    end
                                else
                                    outerSkeleton.Line.Visible = false
                                end
                            end
                        end
                    end
                else
                    if espObject.Box then espObject.Box.Visible = false end
                    if espObject.Line then espObject.Line.Visible = false end
                    if espObject.Name then espObject.Name.Visible = false end
                    if espObject.Health then espObject.Health.Visible = false end
                    if espObject.Distance then espObject.Distance.Visible = false end
                    if espObject.Prediction then espObject.Prediction.Visible = false end
                    
                    for _, line in ipairs(espObject.AdvancedPrediction) do
                        line.Visible = false
                    end
                    
                    if espObject.Coordinates then espObject.Coordinates.Visible = false end
                    
                    for _, skeleton in ipairs(espObject.Skeleton) do
                        skeleton.Line.Visible = false
                    end
                    
                    for _, outerSkeleton in ipairs(espObject.OuterSkeleton) do
                        outerSkeleton.Line.Visible = false
                    end
                end
            else
                RemoveESP(player)
            end
        else
            if espObject.Box then espObject.Box.Visible = false end
            if espObject.Line then espObject.Line.Visible = false end
            if espObject.Name then espObject.Name.Visible = false end
            if espObject.Health then espObject.Health.Visible = false end
            if espObject.Distance then espObject.Distance.Visible = false end
            if espObject.Prediction then espObject.Prediction.Visible = false end
            
            for _, line in ipairs(espObject.AdvancedPrediction) do
                line.Visible = false
            end
            
            if espObject.Coordinates then espObject.Coordinates.Visible = false end
            
            for _, skeleton in ipairs(espObject.Skeleton) do
                skeleton.Line.Visible = false
            end
            
            for _, outerSkeleton in ipairs(espObject.OuterSkeleton) do
                outerSkeleton.Line.Visible = false
            end
        end
    end
end

local function InitializeESP()
    CreateRadar()
    
    for _, player in ipairs(ESP.Players:GetPlayers()) do
        if player ~= ESP.Players.LocalPlayer then
            coroutine.wrap(function()
                CreateESP(player)
            end)()
        end
    end
    
    ESP.Players.PlayerAdded:Connect(function(player)
        if player ~= ESP.Players.LocalPlayer then
            coroutine.wrap(function()
                CreateESP(player)
            end)()
        end
    end)

    ESP.Players.PlayerRemoving:Connect(function(player)
        RemoveESP(player)
    end)
    
    ESP.RenderConnection = ESP.RunService.RenderStepped:Connect(function()
        UpdateESP()
        UpdateRadar()
    end)
end

local function DestroyESP()
    if ESP.RenderConnection then
        ESP.RenderConnection:Disconnect()
        ESP.RenderConnection = nil
    end
    
    for player, _ in pairs(ESPObjects) do
        RemoveESP(player)
    end
    
    if ESP.RadarFrame then ESP.RadarFrame:Remove() end
    if ESP.RadarCenter then ESP.RadarCenter:Remove() end
    if ESP.RadarCrossX then ESP.RadarCrossX:Remove() end
    if ESP.RadarCrossY then ESP.RadarCrossY:Remove() end
    if ESP.RadarCircle then ESP.RadarCircle:Remove() end
end

local function ToggleESP()
    ESP.Enabled = not ESP.Enabled
    
    if ESP.Enabled then
        InitializeESP()
    else
        DestroyESP()
    end
end

local function CreateUI()
    local ScreenGui = Instance.new("ScreenGui")
    ScreenGui.Name = "ESP_GUI"
    ScreenGui.Parent = game:GetService("CoreGui")
    
    local Frame = Instance.new("Frame")
    Frame.Name = "MainFrame"
    Frame.Size = UDim2.new(0, 250, 0, 400)
    Frame.Position = UDim2.new(0, 10, 0, 10)
    Frame.BackgroundColor3 = Color3.fromRGB(40, 40, 40)
    Frame.BackgroundTransparency = 0.5
    Frame.BorderSizePixel = 0
    Frame.Parent = ScreenGui
    
    local Title = Instance.new("TextLabel")
    Title.Name = "Title"
    Title.Text = "全球最强ESP"
    Title.Size = UDim2.new(1, 0, 0, 30)
    Title.Position = UDim2.new(0, 0, 0, 0)
    Title.BackgroundColor3 = Color3.fromRGB(30, 30, 30)
    Title.TextColor3 = Color3.fromRGB(255, 255, 255)
    Title.Font = Enum.Font.SourceSansBold
    Title.TextSize = 18
    Title.Parent = Frame
    
    local ToggleButton = Instance.new("TextButton")
    ToggleButton.Name = "ToggleButton"
    ToggleButton.Text = "开启 ESP"
    ToggleButton.Size = UDim2.new(0.9, 0, 0, 30)
    ToggleButton.Position = UDim2.new(0.05, 0, 0, 40)
    ToggleButton.BackgroundColor3 = Color3.fromRGB(60, 60, 60)
    ToggleButton.TextColor3 = Color3.fromRGB(255, 255, 255)
    ToggleButton.Font = Enum.Font.SourceSans
    ToggleButton.TextSize = 16
    ToggleButton.Parent = Frame
    
    ToggleButton.MouseButton1Click:Connect(function()
        ToggleESP()
        ToggleButton.Text = ESP.Enabled and "关闭 ESP" or "开启 ESP"
    end)
    
    local AdvancedPredictionToggle = Instance.new("TextButton")
    AdvancedPredictionToggle.Name = "AdvancedPredictionToggle"
    AdvancedPredictionToggle.Text = "AI预判: 开启"
    AdvancedPredictionToggle.Size = UDim2.new(0.9, 0, 0, 30)
    AdvancedPredictionToggle.Position = UDim2.new(0.05, 0, 0, 80)
    AdvancedPredictionToggle.BackgroundColor3 = Color3.fromRGB(60, 60, 60)
    AdvancedPredictionToggle.TextColor3 = Color3.fromRGB(255, 255, 255)
    AdvancedPredictionToggle.Font = Enum.Font.SourceSans
    AdvancedPredictionToggle.TextSize = 16
    AdvancedPredictionToggle.Parent = Frame
    
    AdvancedPredictionToggle.MouseButton1Click:Connect(function()
        ESP.AdvancedPrediction = not ESP.AdvancedPrediction
        AdvancedPredictionToggle.Text = "AI预判: " .. (ESP.AdvancedPrediction and "开启" or "关闭")
    end)
    
    local RadarToggle = Instance.new("TextButton")
    RadarToggle.Name = "RadarToggle"
    RadarToggle.Text = "雷达: 开启"
    RadarToggle.Size = UDim2.new(0.9, 0, 0, 30)
    RadarToggle.Position = UDim2.new(0.05, 0, 0, 120)
    RadarToggle.BackgroundColor3 = Color3.fromRGB(60, 60, 60)
    RadarToggle.TextColor3 = Color3.fromRGB(255, 255, 255)
    RadarToggle.Font = Enum.Font.SourceSans
    RadarToggle.TextSize = 16
    RadarToggle.Parent = Frame
    
    RadarToggle.MouseButton1Click:Connect(function()
        ESP.Radar = not ESP.Radar
        RadarToggle.Text = "雷达: " .. (ESP.Radar and "开启" or "关闭")
    end)
end

CreateUI(

return {
    Toggle = ToggleESP,
    SetEnabled = function(state) ESP.Enabled = state end,
    SetBox = function(state) ESP.Box = state end,
    SetLines = function(state) ESP.Lines = state end,
    SetNames = function(state) ESP.Names = state end,
    SetHealth = function(state) ESP.Health = state end,
    SetDistance = function(state) ESP.Distance = state end,
    SetPrediction = function(state) ESP.Prediction = state end,
    SetAdvancedPrediction = function(state) ESP.AdvancedPrediction = state end,
    SetCoordinates = function(state) ESP.Coordinates = state end,
    SetSkeleton = function(state) ESP.Skeleton = state end,
    SetOuterSkeleton = function(state) ESP.OuterSkeleton = state end,
    SetRadar = function(state) ESP.Radar = state end,
    
    SetBoxColor = function(color) ESP.BoxColor = color end,
    SetLineColor = function(color) ESP.LineColor = color end,
    SetNameColor = function(color) ESP.NameColor = color end,
    SetHealthColor = function(color) ESP.HealthColor = color end,
    SetDistanceColor = function(color) ESP.DistanceColor = color end,
    SetPredictionColor = function(color) ESP.PredictionColor = color end,
    SetAdvancedPredictionColor = function(color) ESP.AdvancedPredictionColor = color end,
    SetCoordinatesColor = function(color) ESP.CoordinatesColor = color end,
    SetSkeletonColor = function(color) ESP.SkeletonColor = color end,
    SetOuterSkeletonColor = function(color) ESP.OuterSkeletonColor = color end,
    SetRadarColor = function(color) ESP.RadarColor = color end,
    SetRadarEnemyColor = function(color) ESP.RadarEnemyColor = color end,
    
    SetPredictionTime = function(time) ESP.PredictionTime = time end,
    SetAdvancedPredictionSteps = function(steps) ESP.AdvancedPredictionSteps = steps end,
    SetAdvancedPredictionInterval = function(interval) ESP.AdvancedPredictionInterval = interval end,
    SetHistorySize = function(size) ESP.HistorySize = size end,
    SetRadarSize = function(size) ESP.RadarSize = size end,
    SetRadarRange = function(range) ESP.RadarRange = range end,
    SetRadarDotSize = function(size) ESP.RadarDotSize = size end
}
